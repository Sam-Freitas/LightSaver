close all
clear all
warning('off', 'MATLAB:MKDIR:DirectoryExists');
% img_dir_path = "C:\Users\Lab PC\Documents\GFP_AUC\data\Raul_data\2021-02-16\Exported\";

curr_path = pwd;

% get data path
data_path = fullfile(erase(erase(curr_path,'scripts'),'testing'),'data');

% get experiment dir
exp_dir_path = uigetdir(data_path,'Please select the overarching experiment folder');

% get exp name
[~,experiment_name,~] = fileparts(exp_dir_path);

% this is all to find the data.csv's 
[~,message,~] = fileattrib(fullfile(exp_dir_path,'*'));

fprintf('\nThere are %i total files & folders in the overarching folder.\n',numel(message));

[~,fileNames,fileExts] = fileparts({message.Name});

allNamesFull = join(cat(1,fileNames,fileExts),'',1);

CSVidx = ismember(allNamesFull,'data.csv');    % Search ext for "CSV" at the end
CSV_filepaths = {message(CSVidx).Name};  % Use CSVidx to list all paths.

fprintf('There are %i files with *data.csv names.\n',numel(CSV_filepaths));

csv_cells = cell(1,length(CSV_filepaths));

% read in the tables
for i = 1:numel(CSV_filepaths)
    csv_table{i}= readtable(CSV_filepaths{i},'VariableNamingRule','preserve'); % Your parsing will be different
end

% combine the tables
for i = 1:length(csv_table)
    if isequal(i,1)
        full_table = csv_table{1};
    else
        full_table = [full_table;csv_table{i}];
    end
end

temp_table_array = table2array(full_table(:,2:end));

AUC_array = temp_table_array(:,1:5)./temp_table_array(:,6:10);

% get the names and split the names into parts
img_names = full_table.("Image names");
img_names_split = cell(1,length(img_names));
img_names_no_day = img_names;
img_names_only_day{i} = img_names;

% get split names
for i = 1:length(img_names)
    % find last D
    D_idx = find(char(img_names{i})=='D',1,'last');
    underscore_idx = find(char(img_names{i})=='_');

    D_to_undx = D_idx:(underscore_idx(find(underscore_idx>D_idx,1,'first'))-1);
    % rid of last D
    img_names_no_day{i}(D_idx:end) = [];
    % get only days 
    img_names_only_day{i} = img_names{i}(D_to_undx);
    %split the remaining
    img_names_split{i} = strsplit(img_names_no_day{i},{' ','_'});
    % delete empty 
    img_names_split{i} = img_names_split{i}(~cellfun('isempty',img_names_split{i}));
end

% split experiment names 
experiment_name_parts = strsplit(experiment_name,{' ','_'});

% find if part numerical 
only_numerical_name_parts = str2double(experiment_name_parts);
only_numerical_name_parts(isnan(only_numerical_name_parts)) = 0;

only_numerical_name_parts = logical(only_numerical_name_parts);

experiment_name_parts(only_numerical_name_parts) = [];

% get rid of parts that are contained in the experiment 
img_names_split2 = cell(1,length(img_names_split));
for i = 1:length(img_names_split)
    
    % find parts that are already from the experiment name splits 
    TF = contains(img_names_split{i},experiment_name_parts,'IgnoreCase',true);
    
    % join the rest 
    img_names_split2{i} = char(join(img_names_split{i}(~TF)));
    
end

% get all the condition names
condition_names = unique(img_names_split2)';

% get all the day names
day_names = natsort(unique(img_names_only_day));

img_names_spaces = img_names_no_day;
for i = 1:length(img_names)
    img_names_spaces{i} = strrep(img_names_no_day{i},'_',' ');
end

% find which conditions correspond to what img 
condition_idx = zeros(1,length(img_names_spaces))';
for i = 1:length(condition_names)
    
    this_condition_idx = contains(img_names_spaces,condition_names{i},'IgnoreCase',true);
    condition_idx(this_condition_idx) = i;
    
end

% find which day corresponds to what img
day_idx = zeros(1,length(img_names_spaces))';
for i = 1:length(day_names)
    this_day_idx = contains(img_names_only_day,day_names{i},'IgnoreCase',true);
    day_idx(this_day_idx) = i;
end

% indexable list for variables
idx_list = [1:length(day_idx)]';

final_array = cell(length(day_names)+1,numel(AUC_array));
final_array(2:length(day_names)+1,1) = day_names;

% combine 
for i = 1:length(condition_idx)
    
    this_condition_idx = (condition_idx == i);
    
    for j = 1:length(day_idx)
                
        this_day_idx = (day_idx == j);
        
        this_combined_idx = nonzeros(this_day_idx.*this_condition_idx.*idx_list);
        
        for k = 1:length(this_combined_idx)
            
            this_AUC_data = num2cell(AUC_array(this_combined_idx(k),:));
            
            this_final_row = final_array(j+1,:);
            
            empty_idx = find(cellfun('isempty', this_final_row),1);
            
            final_array(j+1,empty_idx:empty_idx+length(this_AUC_data)-1) = this_AUC_data;
            
            if isequal(j,1)
                final_array(1,empty_idx:empty_idx+length(this_AUC_data)-1) ...
                    = repmat({condition_names{i}},1,length(this_AUC_data));
            end
            
        end
        
    end
end

writecell(final_array,fullfile(exp_dir_path,'Analyzed_data.csv'));


final_array_names =  img_names_split{i}(~cellfun('isempty',img_names_split{i}));
for i = 1:length(day_names)
    
    Origin = cellstr(final_array);
    figure
    vs = violinplot(MPG, Origin);
    ylabel('Fuel Economy in MPG');
    xlim([0.5, 7.5]);
    
end


%%%%%%%%%% find a way to combine the day_idx and condition_idx to get rauls
%%%%%%%%%% way of updateing stuff


%               condition1                    conditionN
% D1          AUC1 ............... AUC N 
% D1+1
% D1+2
% 
% 
% 
% 
% 
% 
% 
% 
% 
